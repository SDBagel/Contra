using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using EarthsTimeline.Models;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;

namespace EarthsTimeline.Controllers
{
    public class AdminController : Controller
    {
        private readonly TimelineContext _context;

        public AdminController(TimelineContext context)
        {
            _context = context;
        }
        
        private bool LoggedIn()
        {
            if (Request.Cookies.ContainsKey("AntiForge") &&
                Request.Cookies["AntiForge"] == "UUDDLRLRBABAS")
                return true;
            else
                return false;
        }

        [Route("/logout")]
        public IActionResult Logout()
        {
            Response.Cookies.Delete("AntiForge");
            return Redirect("~/");
        }

        [Route("/login")]
        [HttpGet]
        public IActionResult Login()
        {
            if (LoggedIn()) return Redirect("~/admin");
            return View();
        }

        [Route("/login")]
        [HttpPost]
        public IActionResult Login(string User)
        {
            if (User == "epstein, please no")
            {
                Response.Cookies.Append("AntiForge", "UUDDLRLRBABAS",
                        new CookieOptions() { Path = "/", Expires = DateTime.Now.AddDays(1), IsEssential = true });
                return Redirect("~/admin");
            }
            else return View();
        }

        [Route("/admin")]
        public async Task<IActionResult> Index()
        {
            if (!LoggedIn()) return Redirect("~/login");

            List<Article> articles = await _context.Article.Where((x) => x.Approved == false).ToListAsync();
            ViewData["Articles"] = _context.Article.Count();
            ViewData["ArticlesList"] = articles;
            ViewData["ArticlesLeft"] = articles.Count;

            List<Comment> comments = await _context.Comment.Where((x) => x.Approved == false).ToListAsync();
            ViewData["Comments"] = _context.Comment.Count();
            ViewData["CommentsList"] = comments;
            ViewData["CommentsLeft"] = comments.Count;

            return View();
        }

        [Route("/generate/")]
        public async Task<string> Generate()
        {
            if (!LoggedIn()) return "not logged in!";
            Article placeholder = new Article
            {
                Approved = true,
                AuthorName = "Kayla!",
                AuthorId = 100023440,
                Date = DateTime.Now,
                Title = "Autogen",
                SummaryShort = "Arts, Opinion, Autogen",
                SummaryLong = "Ever wonder what an autogenerated article looks like?",
                Content = "Now you know!",
                Views = 0
            };

            string[] urls = new string[3] { "https://media.giphy.com/media/l3fQ9icfExRfiePrq/source.gif",
                                            "https://media.giphy.com/media/MJ6SslGZEYKhG/giphy.gif",
                                            "https://static1.e621.net/data/e2/cb/e2cb8f4ffe0e05ddcc8ae93adef08a0e.gif" };
            Random rnd = new Random();
            placeholder.ThumbnailURL = urls[rnd.Next(0, 3)];
            _context.Article.Add(placeholder);
            await _context.SaveChangesAsync();
            return "success: generated autogen post";
        }

        [Route("/degenerate")]
        public async Task<string> Degenerate()
        {
            if (!LoggedIn()) return "not logged in!";
            List<Article> a = (from c in _context.Article
                               where c.Title == "Autogen"
                               select c).ToList();
            _context.Article.RemoveRange(a);
            await _context.SaveChangesAsync();
            return "removed all autogen posts";
        }
    }
}